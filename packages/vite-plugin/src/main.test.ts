import { exec } from 'node:child_process'
import type { AddressInfo } from 'node:net'
import path from 'node:path'
import process from 'node:process'
import { fileURLToPath, pathToFileURL } from 'node:url'
import { promisify } from 'node:util'

import { Fixture } from '@netlify/dev-utils'
import { beforeEach, describe, expect, test } from 'vitest'
import { createServer, type Plugin } from 'vite'

import netlify from './main.js'

const execPromise = promisify(exec)

const PLUGIN_PATH = path.resolve(fileURLToPath(import.meta.url), '../..')

const startTestServer = async (plugin: Plugin, options: Parameters<typeof createServer>[0] = {}) => {
  const server = await createServer({
    ...options,
    plugins: [plugin],
  })

  await server.listen()

  // Wait until the server is actually listening
  const address = await new Promise<AddressInfo | string | null>((resolve, reject) => {
    const { httpServer } = server
    if (!httpServer) {
      reject(new Error('No httpServer'))
      return
    }

    if (httpServer.listening) {
      resolve(httpServer.address())
      return
    }

    httpServer.once('listening', () => {
      resolve(httpServer.address())
    })
    httpServer.once('error', reject)
  })

  const port = typeof address === 'object' && address ? address.port : 5173
  return { server, url: `http://localhost:${port.toString()}` }
}

describe('Plugin constructor', () => {
  test('Is a no-op when running in the Netlify CLI', () => {
    process.env.NETLIFY_DEV = 'true'

    expect(netlify()).toEqual([])
  })

  describe('configureServer', () => {
    const originalEnv = { ...process.env }
    beforeEach(() => {
      process.env = { ...originalEnv }
    })

    test('Populates Netlify runtime environment (globals and env vars)', async () => {
      const fixture = new Fixture()
        .withFile(
          'vite.config.js',
          `import { defineConfig } from 'vite';
        import netlify from '@netlify/vite-plugin';

        export default defineConfig({
          plugins: [
            netlify()
          ]
        });`,
        )

        .withFile(
          'index.html',
          `<!DOCTYPE html>
        <html>
          <head>
            <title>Vite Plugin Test</title>
          </head>
          <body>
            <h1>Testing Netlify Vite Plugin</h1>
            <script type="module" src="/main.js"></script>
          </body>
        </html>`,
        )

        .withFile('main.js', `console.log('Hello from the browser');`)

      const directory = await fixture.create()
      // We have to do this afterward because we need to resolve that path relative to the fixture,
      // but the path is only generated by `create()`
      await fixture.writeFile(
        'package.json',
        JSON.stringify({
          type: 'module',
          dependencies: {
            vite: '6.0.0',
            '@netlify/vite-plugin': pathToFileURL(path.resolve(directory, PLUGIN_PATH)).toString(),
          },
        }),
      )
      await execPromise('npm install', { cwd: directory })

      // Create a real Vite server with our plugin
      const { server } = await startTestServer(netlify({ middleware: false }) as Plugin, {
        root: directory,
        logLevel: 'silent',
      })

      expect((globalThis as Record<string, unknown>).Netlify).toBeInstanceOf(Object)
      expect(process.env).toHaveProperty('NETLIFY_LOCAL', 'true')
      expect(process.env).toHaveProperty('CONTEXT', 'dev')

      await server.close()
      await fixture.destroy()
    })
  }, 15_000)
})
